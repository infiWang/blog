{"meta":{"title":"Temporal Aliasing","subtitle":"","description":"infiWang's Blog","author":"infiWang","url":"http://blog.infi.wang","root":"/"},"pages":[{"title":"404 Panicked","date":"2024-09-19T04:03:08.390Z","updated":"2024-09-19T04:03:08.390Z","comments":true,"path":"404.html","permalink":"http://blog.infi.wang/404","excerpt":"","text":"404 Not Found Address typo / Moved / Removed ?"},{"title":"About","date":"2019-07-28T22:36:30.000Z","updated":"2024-09-19T04:03:08.391Z","comments":true,"path":"about/index.html","permalink":"http://blog.infi.wang/about/","excerpt":"","text":"infiWang Here!UNDER RECONSTRUCTION"},{"title":"archives","date":"2019-11-24T23:11:23.000Z","updated":"2024-09-19T04:03:08.391Z","comments":true,"path":"archives/index.html","permalink":"http://blog.infi.wang/archives/","excerpt":"","text":""},{"title":"Category","date":"2024-09-19T04:03:08.391Z","updated":"2024-09-19T04:03:08.391Z","comments":true,"path":"categories/index.html","permalink":"http://blog.infi.wang/categories/","excerpt":"","text":""},{"title":"Friends","date":"2024-09-19T04:03:08.391Z","updated":"2024-09-19T04:03:08.391Z","comments":true,"path":"friends/index.html","permalink":"http://blog.infi.wang/friends/","excerpt":"My friends here, everyone is great! 是我的朋友们，大家都很厉害！","text":"My friends here, everyone is great! 是我的朋友们，大家都很厉害！ If you’d like to show your site here, follow this rule and create an issue in this metadata repo. 如果你也想让自己的站点展示在这里，请依照说明向咱的metadata仓库提交issue。"},{"title":"标签","date":"2024-09-19T04:03:08.391Z","updated":"2024-09-19T04:03:08.391Z","comments":true,"path":"tags/index.html","permalink":"http://blog.infi.wang/tags/","excerpt":"","text":""}],"posts":[{"title":"十二月二十三日","slug":"december-23rd.zh","date":"2020-12-23T23:46:34.000Z","updated":"2024-09-19T04:03:08.610Z","comments":true,"path":"posts/2020/12/december-23rd.zh/","link":"","permalink":"http://blog.infi.wang/posts/2020/12/december-23rd.zh/","excerpt":"12345infi@infiSurfaceGo2 ~ &gt; dateWednesday, December 23, 2020 11:39:01 PMinfi@infiSurfaceGo2 ~ &gt; &emsp;&emsp;去年此刻，我应该还在调整着这里的持续集成系统。整整一天前，我刚下课，和队友在图书馆会合。现在，我坐在宿舍楼下的自习室。敲下这行字的几十分钟后，咱就二十岁了。","text":"12345infi@infiSurfaceGo2 ~ &gt; dateWednesday, December 23, 2020 11:39:01 PMinfi@infiSurfaceGo2 ~ &gt; &emsp;&emsp;去年此刻，我应该还在调整着这里的持续集成系统。整整一天前，我刚下课，和队友在图书馆会合。现在，我坐在宿舍楼下的自习室。敲下这行字的几十分钟后，咱就二十岁了。 “岁岁除“&emsp;&emsp;“年”，指地球公转一周所用的时间。“岁”，指以年为单位的、某个事物存在的时间。 &emsp;&emsp;咱不太喜欢写东西，但很明显，今天例外。所以让我提个问题：这个生日很特别吗？ &emsp;&emsp;我们先探讨一下时间的度量。任何量的评判都免不了对比，时间也不例外。我们用一个昼夜或一年的一部分来定义一天；相似地，我们也用原子震荡一定次数所花的时间定义一秒。改变用来定义的参照，时间仍然是时间，不过是做了线性变换而已，某种程度上还不如说是我们的定义眼光狭隘、有失偏颇。古罗马历法的一年只有十个月, 各式基于月相的历法也和公历大相径庭。如果把一年的长度缩短三百六十五倍，每一天都可以是你的生日; 把一秒的长度拉伸千万倍，“则天地曾不能以一瞬”…… &emsp;&emsp;在小学后，仪式感早已没有那么强烈了。但既然ddl战士的我还是在今天写下了上面的话，很明显，今年我的答案是肯定的。在一岁中，我们经历了许多：和朋友的欢笑，席卷全球的瘟疫，为自己的未来所做的奋斗，以及自己崭新的大学生活。尤其是最后一者，我并不满意，但又没有做出多少改变。 &emsp;&emsp;继续讨论之前的问题。为什么一天、一年的定义是现在这样的？答案很简单：日落日出，人们在休息后开始了不一样的活动；四季更迭，人们得以创造不一样的耕耘。新的开始决不是什么魔法，不愿做出改变的人无论迎来多少个明天都不会有所行动，不愿付诸实践的人就算整日提出设想也不会有新的收获。关键的部分是对事物的刷新：一晚的休息让我们又充满了动力，四季的更替让万物无时无刻不在变化之中。而当另一个相似却又崭新的回合来临时，一次反思显得弥足珍贵。我们活在熵增的世界，切莫把自己困在一成不变的热寂之中。 十二月二十三日&emsp;&emsp;三年前的十二月二十三日，心理咨询方才结束不久。回家的路上，我看着朋友的游戏直播，想起了之前联机时的欢乐时光。 &emsp;&emsp;两年前的的十二月二十三日，我刚刚进入梦乡。那是复学的第一个学期，一切都显得陌生、困难而又充满可能。 &emsp;&emsp;去年此刻，我调好了这里的持续集成系统，在社交媒体上展示的时候还开玩笑是给第十九年的自己的礼物。 &emsp;&emsp;整整一天前，我和队友在自习室赶着Java课的Project。并不喜欢这节课，但精神却又无比投入，“不知东方之既白”。 &emsp;&emsp;三小时前，教室里响起了清场广播。音乐是《回家》，和初中的清场广播一样；略带感伤却又无比悠扬。 &emsp;&emsp;两小时前，我翻阅着微积分和线性代数的讲义。下一周便是考试周，一定不能留下遗憾。 &emsp;&emsp;现在，我坐在宿舍楼下的自习室。敲下这行字的那一刻，咱已经二十岁了。","categories":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/categories/infi/"},{"name":"中文","slug":"中文","permalink":"http://blog.infi.wang/categories/%E4%B8%AD%E6%96%87/"}],"tags":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/tags/infi/"},{"name":"随笔","slug":"随笔","permalink":"http://blog.infi.wang/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"彩虹六号：围攻 CGI与PCK声音解包指南","slug":"r6s-datamine-guide.zh","date":"2020-03-17T20:15:46.000Z","updated":"2024-09-19T04:03:08.611Z","comments":true,"path":"posts/2020/03/r6s-datamine-guide.zh/","link":"","permalink":"http://blog.infi.wang/posts/2020/03/r6s-datamine-guide.zh/","excerpt":"自Y5S3暗影之遗行动开始, 声音文件由PCK包变为了AnvilNext的Forge包. 本教程暂未对此做出更新 包本身和部分解包后的文件已上传至我的下载站, 持续更新 infiDownloadSite/R6SFiles 本教程需要您有一定计算机基础","text":"自Y5S3暗影之遗行动开始, 声音文件由PCK包变为了AnvilNext的Forge包. 本教程暂未对此做出更新 包本身和部分解包后的文件已上传至我的下载站, 持续更新 infiDownloadSite/R6SFiles 本教程需要您有一定计算机基础 下载站也会对一些赛季限定内容进行归档, 让Siege的历史变得Unbreakable^1! 注意, 为了规避版权风险并减少无谓的破解，我永远不会归档二进制文件. Operation Breach Out缘起*Rainbow Six Siege Operation Shifting Tides *正在连接到服务器 *通行证加载 *通行证购买, 通行证关闭 通往国际邀请赛之路 58:32 对战已开始 Your browser does not support the audio tag. &emsp;&emsp;当时听到这段BGM的时候差点没Ban对干员, 实在太ao听了 &emsp;&emsp;活动开始几天后发生了什么相信大家都知道. 很不巧, 加之自己的电脑显卡爆炸, 没有BGM听我要死了 &emsp;&emsp;所以我就开始研究怎么解包力，，， 分析及解包&emsp;&emsp;R6S的exe(PE)也许会有部分逻辑, 但太大了、没必要, 何况我也不是很懂binary逆向. 而且通过观察黑盒判断黑盒内部逻辑不挺好玩的吗 &emsp;&emsp;R6S使用了Ubi自研的AnvilNext3.0引擎, 而用于存档的forge文件还和其它Anvil引擎游戏不太一样(好像FH也这个德性?) 所以材质、模型之类的东西我现在就不尝试了. (也许高考完会试试) &emsp;&emsp;那剩下的只有CGI和声音了. CGIUbi没有把声音打在bik里, 要么准备解pck声音包, 要么就享受无声世界罢. 文件信息 &emsp;&emsp;如果你曾经研究过拆迁的文件结构, 会发现所有CGI其实都存储在RAD Video Tools打包的.bik视频文件里, 而文件本身则位于拆迁目录里的videos文件夹中. 文件没有加密, 具体编码封装工具据RAD VT报告称是Bink 2. 这样的bik文件去RAD官网下载一套工具就能打开. 在2018年Outbreak TTS时, 我就是靠这个工具得以提前12小时看到了不同任务的序言CG. 工具 RAD Video Tools 由RAD Game Tools开发的专有视频处理工具, 可处理Bink及Smack格式视频 下载地址: Bink Downloads 使用RAD Video Tools解包&emsp;&emsp;RAD Video Tools用来解包相当简单, 一般来说只需打开RAD VT, 在选中想解包的CG后点击”Convert to……”按钮, 最后选择输出格式、确定输出路径就好了. 如果需要直接转为视频则只能输出avi, 编码也只能选未压缩. 不过众所周知, 未压缩的avi视频相当大, 如果您只是需要分享则最好输出exe, 输出文件大小和源文件几乎一致. (我猜是把一个播放器和bik打包在一起了) &emsp;&emsp;你问能不能用现代的编码器? 醒醒, Bink 1不支持外部编码器, 而现代的Bink 2 SDK是付费、商业用的…… &emsp;&emsp;”那其它内置的编码器不能用🐎?” 在, 看看关于? 上世纪的编码器您敢用? 即便使用, 输出的文件也会有一车问题. 是FFmpeg重新编码不香吗? 但这个我就不赘述了. &emsp;&emsp;不过R2SI 2020的序言CGI是个例外, 即便输出raw avi也会出现诡异的时间轴和采样问题. 但将每一帧输出为图片则没有问题…… &emsp;&emsp;鬼知道未来还会不会出现这种问题, 而且方便传播的视频谁不爱呢? 因此我认为需要一个备用方案, 所以该FFmpeg登场了. 令RAD VT输出每一帧为图片, 并使用FFmpeg将图片编码为视频&emsp;&emsp;(我没有空间和时间再演示一次R2SI 2020的CGI解包打包了, 找了个Y5干员bundle解锁CGI权当示例, 反正操作完全一致 &emsp;&emsp;首先通过RAD VT查看.bik视频的帧率(File Info), 要是和整数很接近的小数的话四舍五入到整数并记住它. (这样的帧数其实是个历史包袱, 感兴趣的话可以观看影视飓风的视频) &emsp;&emsp;接下来使用RAD VT的转换功能, 设置RAD VT的输出为png以保持无损, 选好输出目录与输出名字, 开始转换. 视频的每一帧将自动输出为png图片, 并在文件名最后自动加上帧数号(帧数号含前缀0). &emsp;&emsp;假定你已经配置好了FFmpeg, 可以使用终端/命令行调用. 我们只需要调用ffmpeg/ffmpeg.exe &emsp;&emsp;打开终端/命令行, 执行以下命令: 123(ffmpeg程序路径) -framerate (源文件帧率) -i (图片位置)/(输出文件名)%(最大帧数位数)d.png -c:v libx264 -preset veryslow -crf 17 -tune film -r (源文件帧率) (输出路径)/(输出文件名, 含扩展名) -framerate指定了输入文件被看待的帧率, -i指定了输入文件, -c:v指定了输出视频的编码器, -crf指定了输出质量, -r指定了输出文件的帧率. 文件名中的通配符与C/C++中scanf函数的参数一致. 如有Intel/Nvidia/AMD的可编码视频的GPU, 可将编码器换为h264_qsv/h264_nvenc/h264_amf, 相应地输出文件质量会有所下降. -preset 为预设, veryfast/fast牺牲质量换取时间, slower/veryslow牺牲时间换取质量. 时间越短, 输出文件大小越大, 质量越差, 反之亦然. 需要其它预设请自行查阅FFmpeg手册. -crf 取值0-51, 17/18为视觉无损压缩. 如果希望降低输出大小可适当增加, 当然质量会相应地有所下降. -tune 可针对场景调节编码, 优化图像质量. 由于拆迁所有CGI全为写实渲染, 建议选择film. 以上使用了目前最流行的H.264编码, 需要H.265将上述编码器名称中的264换为265即可. 其它编码如VP9, AV1请自行探索. 注意, 不是所有编码器都支持以上微调选项! 建议输出mp4/flv/mkv, 方便后期添加声音. 根据实际情况替换括号(包括括号本身)的内容. &emsp;&emsp;以我举的样例为例, 命令为: 123./ffmpeg.exe -framerate 30 -i ./tutor/y5s1_opsunlock_bundle_dynamic%3d.png -c:v libx264 -crf 17 -r 30 ./y5s1_opsunlock_bundle_dynamic.mp4 &emsp;&emsp;这里是运行结果: &emsp;&emsp;如果操作过程中不出错, 成品应该会出现在你指定的位置. &emsp;&emsp;下面便是是成品. 注意, 为了能塞进CDN, 我把成品转为了gif并降低了分辨率和帧率. &emsp;&emsp;如需添加音轨, 再在第一个-i后添加另一个-i开关并输入音频, 接着对音频使用copy编码就行了. 其它高级玩法请自行查阅FFmpeg手册. 声音&emsp;&emsp;在Y0至Y5S2钢铁洪流赛季, 拆迁的声音使用了Audiokinect Wwise套件, 并被打包在拆迁根目录下的sounddata目录的子目录中, 扩展名为.pck &emsp;&emsp;从Y5S3暗影之遗开始, 育碧将声音包改用AnvilNext封包, 针对pck的方法自此开始不再适用. 目前已有对新格式文件的研究, 将来将会持续跟进. 文件信息&emsp;&emsp;.pck文件有多种命名方式: sound_sfx 存储各种音效, 大多为枪声/物件声. sound_sfx_bootstrap 存储赛季/活动音乐(主题曲)、地图音乐与部分UI/氛围音效. sound_sfx_playgo 存储情境、情境/干员CGI音乐与部分UI/氛围音效 sound_sfx_maps 存储地图环境音与地图内物件声音. sound_sfx_events 存储活动所使用的特殊音效. sound_sfx_cgi 存储CGI使用的音乐. sound_(语言缩写) 存储对应语言的语音. 及以上格式的组合, 等. &emsp;&emsp;这里是Y5S1.0文件列表示例: &emsp;&emsp;将.pck拆开后会发现子文件有四种扩展名. 这里给出对应编码和主要存储内容: .wwise 为Wwise Vorbis RIFF编码的有损声音文件, 几乎什么都存储(例如赛季主题曲, 地图主题音乐, 菜单BGM、按钮音效) .lwav 为Wwise IMA ADPCM编码的无损声音文件, 存储部分地图/物件音效 .at3 为Wwise PCM编码的无损声音文件, 寥寥无几 .pnk 为包含文件内部名称及部分声音子文件的包 禁止套娃 &emsp;&emsp;在Y4的某次更新中, .pnk文件不再存储声音的内部名称, 使用现有工具/脚本解当前版本游戏的包, 所得的对应声音的文件名将会变为相应文件在原包中的16位offset地址! 工具以下内容较为硬核, 不建议普通玩家轻易尝试. 而且由于我时间不足, 以下教程仅为粗略指导, 若有无法复现情况的请认真阅读相应工具的帮助文档, 进行Debug, 并前往相应工具来源论坛求助. 如果未来有时间, 我会对下述内容进行对普通人更友好的完善. &emsp;&emsp;Wwise在游戏工业界已经使用多年, 即便官方从未支持解包, 民间工具也已相当完善. 这里列举我所使用的工具. &emsp;&emsp;下述工具均已上传至我的下载站. infiDownloadSite/R6SFiles/Tools 手动工具 QuickBMS 通用文件处理引擎, 为一脚本解释器. 由Luigi Auriemma开发, 开源, 协议未知. 主页: Luigi Auriemma QuickBMS ww2ogg Wwise Vorbis RIFF/RIFX编码声音文件转ogg Vorbis声音文件工具, 用于转换.wwise文件. 由hcs(Adam Gashlin)开发, 开源, 使用BSD Clause-3协议. GitHub仓库: hcs64/ww2ogg wwise_ima_adpcm Wwise IMA ADPCM编码声音文件与PCM声音文件互转工具, 用于转换.lwav文件. 由Zwagoth开发, 未找到原始下载源. revorb ogg Vorbis音频granule_position修复工具, 用于修复ww2ogg输出. 由Yirkha(Jiri Hruska)开发, 开源, 使用MIT协议. 原发布贴: Can’t play vorbis 源代码: revorb.cpp func_getTYPE.bms 使用启发式算法确定文件类型的QBMS脚本, 是多个QBMS脚本的依赖, 作者为XeNTaX论坛的AlphaTwentyThree. pck_AKPK_extractor.bms 用于解包.pck文件的QBMS脚本, 作者同为XeNTaX论坛的AlphaTwentyThree. bnk_extractor.bms 用于解包.bnk文件的QBMS脚本, 作者依然是XeNTaX论坛的AlphaTwentyThree. wwise_pcm_decoder.bms Wwise PCM编码声音文件转PCM声音文件QBMS脚本, 用于转换.at3文件. 作者未知. 自动工具One tool to Rule’em all Tom Clancy’s Rainbow Six Siege Sound Extractor R6S声音文件解包工具, 作者为XeNTaX论坛的FatalBulletHit. 开源, 协议未知. 本质为Windows CMD脚本与Powershell脚本, 将上述手动工具解包过程自动化. 原发布贴: Tom Clancy’s Rainbow Six Siege Sound Extractor 使用手动工具解包&emsp;&emsp;大多数工具按照相应–help和文档进行操作即可. 使用自动工具解包&emsp;&emsp;从源站下载bat, 执行, 完结撒花( &emsp;&emsp;有以下几个坑: Powershell版本不应低于Powershell 4 bat脚本其实只是核心Powershell脚本的Bootstrapper, 建议在实际使用时直接从Powershell启动ps1脚本, 否则容易出现像是文件解不出来、解出AudioKinect文件不转换甚至都解好转换完毕了还能删歪来的迷惑行为. 工具默认从注册表读取Uplay版本的安装地址. 如果你用的是Steam / Origin / 其它平台(包括破解版 / 备份), 记得修改脚本中的地址定义变量. 注意符号转义行为! 脚本默认使用Powershell的Test-Connection函数对www.google.com 测试网络连通性, 若不通脚本则会罢工, 而且在国内即便开了小飞机也有可能出现奇妙的问题. 建议全文搜索, 将 www.google.com 替换成国内可ping地址. 我个人使用的是 www.miui.com . 当然, 要是您的网络无法下载脚本所需的相应手动工具, 自然也无法解包. 建议打开-Debug开关, 时刻准备好debug. 只要你在工具内选择解相应格式的包, 所有对应格式的包都会被解包、转换. 对于pck原包来说, 其实工具只是识别并解”游戏文件夹/sounddata/pc”内的所有pck包文件. 如果您只想解某一特定的包, 可以将不想要的文件剪切走; 或者干脆新建个文件结构和游戏目录一致的”假”文件夹, 把想解的包粘贴进去, 再把假游戏文件夹喂给脚本就行了. 原文件内小文件众多, IOPS压力会很大, 解包输出也大的离谱. 建议准备好声音文件大小两倍左右的空间, 放在SSD上跑. 个人解Y4S4时程序在eMMC USB盘上跑了15个小时, 人都等傻了. Happy Hacking!","categories":[{"name":"中文","slug":"中文","permalink":"http://blog.infi.wang/categories/%E4%B8%AD%E6%96%87/"},{"name":"教程","slug":"教程","permalink":"http://blog.infi.wang/categories/%E6%95%99%E7%A8%8B/"},{"name":"游戏","slug":"游戏","permalink":"http://blog.infi.wang/categories/%E6%B8%B8%E6%88%8F/"},{"name":"彩虹六号","slug":"彩虹六号","permalink":"http://blog.infi.wang/categories/%E5%BD%A9%E8%99%B9%E5%85%AD%E5%8F%B7/"},{"name":"逆向","slug":"逆向","permalink":"http://blog.infi.wang/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"http://blog.infi.wang/tags/%E6%B8%B8%E6%88%8F/"},{"name":"彩虹六号","slug":"彩虹六号","permalink":"http://blog.infi.wang/tags/%E5%BD%A9%E8%99%B9%E5%85%AD%E5%8F%B7/"},{"name":"逆向","slug":"逆向","permalink":"http://blog.infi.wang/tags/%E9%80%86%E5%90%91/"},{"name":"教程","slug":"教程","permalink":"http://blog.infi.wang/tags/%E6%95%99%E7%A8%8B/"},{"name":"RAD Video Tools","slug":"RAD-Video-Tools","permalink":"http://blog.infi.wang/tags/RAD-Video-Tools/"},{"name":"QuickBMS","slug":"QuickBMS","permalink":"http://blog.infi.wang/tags/QuickBMS/"}]},{"title":"他与OI","slug":"his-oi-story.zh","date":"2019-12-01T13:15:49.000Z","updated":"2024-09-19T04:03:08.610Z","comments":true,"path":"posts/2019/12/his-oi-story.zh/","link":"","permalink":"http://blog.infi.wang/posts/2019/12/his-oi-story.zh/","excerpt":"&emsp;&emsp;西西佛斯因恼怒了神祇, 被罚以一项永无止歇的苦刑: 将一块大石头从奥林帕斯山下推到山上. 但由于诅咒的力量, 巨石抵达山顶的刹那, 就会自动滚落到山下, 周而复始. 西西佛斯永远没有完成使命的一天, 永远重复同样劳苦无望的命运……&emsp;&emsp;然而有一天, 西西佛斯在搬运巨石的途中忽然觉得自己搬动巨石的每个动作都那么美: 他专注地观察着自己全力以赴的每个当下, 有了一种幸福感; 他全心享受这份苦役, 不再抱怨焦虑. 奇妙的事发生了: 诅咒竟然在这一刹那解除, 巨石不再滚回山下, 西西佛斯从永无休止的苦役中重获自由.","text":"&emsp;&emsp;西西佛斯因恼怒了神祇, 被罚以一项永无止歇的苦刑: 将一块大石头从奥林帕斯山下推到山上. 但由于诅咒的力量, 巨石抵达山顶的刹那, 就会自动滚落到山下, 周而复始. 西西佛斯永远没有完成使命的一天, 永远重复同样劳苦无望的命运……&emsp;&emsp;然而有一天, 西西佛斯在搬运巨石的途中忽然觉得自己搬动巨石的每个动作都那么美: 他专注地观察着自己全力以赴的每个当下, 有了一种幸福感; 他全心享受这份苦役, 不再抱怨焦虑. 奇妙的事发生了: 诅咒竟然在这一刹那解除, 巨石不再滚回山下, 西西佛斯从永无休止的苦役中重获自由. 这是他的故事&emsp;&emsp;不知道是什么时候, 父亲在一个傍晚给他展示了一台笔记本电脑. 小孩子生性爱玩, 乱按之下不小心把电脑的光驱弹出了, 引得父亲一阵大笑. &emsp;&emsp;6岁那年, 他在父亲的书柜上看到了一本Delphi编程教程, 拿下来开始瞎读. 父亲见状打开了电脑, Delphi的界面映入眼中. 他不懂什么是编程, 但觉得控件拖拽后就成了电脑里的界面是很奇妙的事. “你拖了个计时器, 想编个时钟吗?” 父亲调侃道. 原来这就是编程? 他想着. &emsp;&emsp;小学时他用着Word自带的VB不时在计算机课上瞎搞, 意外发现了变量类型间转换的奇妙关系; 在Minecraft的方块世界中, 他见识到了mod与JVM的神奇. 彼时VB.Net带来的巨大语法变化让他连面向谷歌编程都无所适从, 也许是时候学新语言了。C++？听说大学生都不一定能学会…… &emsp;&emsp;父亲换了工作, 在一个军工机构下属单位. 父亲带上他去公司玩, 楼下的火车呜呜地飞驰. 高新区很冷清, 但这条街道却不一样, 路上全是中学生. 坐在自行车上, 店铺招牌一个个地从眼前飘过. 突然, 招牌断开了, 取而代之的是围墙上一个个的三环图标. “这里是SF, 我们省最厉害的高中! “ 父亲说着，满是期冀。 &emsp;&emsp;时光飞逝, 他小学毕业了，小升初考上了全省最优秀的两所初中：一二一中学和建设路中学，他最终选择了一二一中学。 &emsp;&emsp;他认识了Mouered, 最开始只是因为Minecraft. Mouered喜欢航模, 他喜欢计算机, 未尝想Mouered知道他的兴趣后找他借了一本VB编程教程。Mouered写了个聊天软件，信息老师见了大为赞叹。他想写个安装器，哪知道自己连开源压缩库都不会用；他想用C#写个能与Mouered的程序兼容的客户端，甚至还能用QQ做广域网通信，最终却只写了个主界面就懒病发作。但他却想还幻想着能开个大公司，超越巨硬和404…… &emsp;&emsp;每天早上, 他都会骑自行车上学. 寒风瑟瑟, 路边树上的梧桐叶所剩无几. 初三即将升学, 但他的成绩却依然”不理想“。父母曾专门找他, 用上期末的分数做了个换算, 数落着连九中和甲中都考不上. 他不满地争辩: 一二一中学的题目很难, 何况他受了伤…… 但在父母看来都是狡辩. 他压力倍增, 上学路上只想着更快一点, 在那霓虹灯熄灭前超过它, 否则就考不上SF…… 他知道这是幻想, 物质世界是永远不会随主观臆想改变的, 但又有何用? &emsp;&emsp;梧桐树又长满了绿叶，天气渐渐变得炎热。中考到了。考完的那天晚上，狂风大作，雨水轰击着屋檐与树叶, 十多个响雷划破夜空。他听着、看着，想笑又不知道为什么。 &emsp;&emsp;他交了SF的志愿单, 想象着和父亲一起上学. 父母以求稳为由, 逼迫他把志愿改成乙中. &emsp;&emsp;他已经不记得那几天是怎么过去的了. 永恒的夏日, 无尽的阳炎, 只有一台树莓派和几块开发板陪他度日. 只要父亲一回家, 他们便争吵着志愿的事, 却都以填都填了为由被搪塞了回去. &emsp;&emsp;出分了, 575分. 他刚想跳起来, 却还没使力就绝望地掉了下去. &emsp;&emsp;这是一个即便在一二一中学这样群英荟萃的地方都亮眼的分数. &emsp;&emsp;Mouered去了SF, 他也本因这样, 但没有; SF开始了YNOI的复兴, Mouered也参加了; 他也想去, 但乙中对OI根本不上心; 他开始幻想着时光能倒流. 但不可能. &emsp;&emsp;17年, 他倒在了抑郁症下。他开始了漫长的休学. 又是一年盛夏, NOIP2017就快到了. 他本想找HYH老师请LYY带他, 但他的心境甚至连游戏都打不动. 云竞赛? 也好。他开始在问答上阅读OIer们的交流, 混进OI群学习神犇们的高谈阔论。他开始学习编译原理，向晦涩的C++进发。 &emsp;&emsp;红嘴鸥飞临，又是冬天了。他开始迷上了理论计算机与图形学。和网友打游戏虽能获得一时的快乐，但不论如何，他终要面临复学。9月，他回到了学校。”但是OI呢？“ &emsp;&emsp;”现在有一个竞赛, 感兴趣的可以过来看看.” “是NOIP吗?” “对的！” 就这样，ZSH成了他的教练。Mouered开始调侃他是不是圆了梦。 &emsp;&emsp;我想，是的。毕竟，”他”就是我，infiWang。回望过去，填写中考志愿那天在教室门口怅然若失的我哪能想到自己会走上一条这样的道路。翻开初中毕业纪念册，自己留下的那句“做最好的自己”依然醒目。 &emsp;&emsp;是的, 我OI很菜. NOIP18丢了100多分, 今年的CSP19更是如此. 也许着一切只是我对SF的情结? 又或就如风之鱼的一场梦? 这不重要. 重要的是, 我为了自己奋斗过. 虽然我NOIP2018分数不占优势, 还是在省选中考到了全省前五的好成绩；何况，我还在这奇幻的经历中认识了YZH、GLY、HWH、YY、WilliamGong、XWY、SheKong、JzJiang、neilkleist、yussgrw、范滇东、泠妄、悠悠、一个昵称、wyqwq、QiFeng众多YN及省外的OIer, 而且恐怕是理社的第一名cg社员; 在班级上, 众多各学科竞赛选手互相支持; 在CS方面, 我学到了很多算法及算法的思想, 对计算机的认识又更深了…… &emsp;&emsp;就如ZCY所说：”我们喜欢的可能不是OI，而是OI这件事情本身，而是和一群志同道合的人一起，做些即使拿自己的未来做赌注也喜欢，也要去做的事情。“ 所以，对事物追求的经历与在其中奋斗的过程才是最为重要的吧。 &emsp;&emsp;一如校训中的刚毅艰卓，抑或是熊庆来先生留下的“行远路，做大事”。 谢谢你听完我的故事另外致谢：Mouered，ZXY，ZSH，LYY，WBY。","categories":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/categories/infi/"},{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/categories/OI/"},{"name":"中文","slug":"中文","permalink":"http://blog.infi.wang/categories/%E4%B8%AD%E6%96%87/"}],"tags":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/tags/infi/"},{"name":"随笔","slug":"随笔","permalink":"http://blog.infi.wang/tags/%E9%9A%8F%E7%AC%94/"},{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/tags/OI/"}]},{"title":"NOIP2018 Day2T1 题解","slug":"noip2018-d2t1-solution.zh","date":"2019-11-12T20:33:42.000Z","updated":"2024-09-19T04:03:08.611Z","comments":true,"path":"posts/2019/11/noip2018-d2t1-solution.zh/","link":"","permalink":"http://blog.infi.wang/posts/2019/11/noip2018-d2t1-solution.zh/","excerpt":"去年考场上本题考虑过多, 喜提60变20、1=变2=、省队变差8分, 草(砸电脑.gif 本题解几乎全为代码, 请静下心阅读. 我相信我的代码的可读性还是很高的.","text":"去年考场上本题考虑过多, 喜提60变20、1=变2=、省队变差8分, 草(砸电脑.gif 本题解几乎全为代码, 请静下心阅读. 我相信我的代码的可读性还是很高的. 题目 题解&emsp;&emsp;回到正题. 首先观察数据. n = 5000, 所以暴力就好了. 我在考场上用邻接矩阵都过了树的subtask. &emsp;&emsp;现在讨论各个subtask的情况. n = m - 1&emsp;&emsp;明显, 此时的图为一棵树. 只需以出边到达点字典序从小到大进行一次不回溯的DFS(树生成), 再判断生成树的字典序即可; 复杂度$\\Theta \\left ( N \\right )$. &emsp;&emsp;以下为本人去年此subtask的去锅代码. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;cstdlib&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;const int maxN = 5000;int n,m,current;bool isFinal;int minimalSet[1 + maxN];bool isCityVisited[1 + maxN];bool roadIndex[1 + maxN][1 + maxN];void travel(int nowCity)&#123; if(isFinal) &#123; return; &#125; current++; minimalSet[current] = nowCity; isCityVisited[nowCity] = true; if(current == n) &#123; minimalSet[0] = nowCity; for(int i = 1;i &lt;= n;i++) &#123; printf(&quot;%i &quot;,minimalSet[i]); &#125; isFinal = true; return; &#125; for(int i = 1;i &lt;= n;i++) &#123; if(isCityVisited[i] == false &amp;&amp;(roadIndex[nowCity][i] || roadIndex[i][nowCity])) &#123; travel(i); &#125; &#125;&#125;int main()&#123; std::cin &gt;&gt; n &gt;&gt; m; for(int i = 1;i &lt;= m;i++) &#123; int u,v; scanf(&quot;%i %i&quot;,&amp;u,&amp;v); roadIndex[u][v] = true; roadIndex[v][u] = true; &#125; travel(1); return 0;&#125; n = m&emsp;&emsp;相应地, 这种情况下的图为有且只有一条环的图. &emsp;&emsp;去年看到这就放弃了, 毕竟当时连存图都是凭印象瞎搞的. 当然, 现在看来无非两种方式: 找边, 找环. 这里从简(其实还是不会), 只讨论暴力断边的方案. &emsp;&emsp;这样一张图(基环树/图)有这样的性质: 断环上的任意一条边, 图就变成一棵树. 那么就有以下暴力断开每一条边再进行树生成并判断字典序的代码. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include &lt;cstdlib&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;iostream&gt;struct Edge&#123; int u, v; bool w; Edge(int U = 0, int V = 0, bool W = true) &#123; (*this).u = U, (*this).v = V, (*this).w = W; &#125; void reverse() &#123; std::swap((*this).u, (*this).v); return; &#125; Edge getReversed() &#123; return Edge((*this).v, (*this).u, (*this).w); &#125; Edge operator = (const Edge&amp; inEdge) &#123; (*this).u = inEdge.u, (*this).v = inEdge.v, (*this).w = inEdge.w; return *this; &#125; &#125;emptyEdge;inline bool cmp(Edge E, Edge e)&#123; return E.v &lt; e.v;&#125;inline void copy(int n, int* ori, int* des)&#123; for(int i = 1; i &lt;= n; i++) des[i] = ori[i];&#125;inline void set(int n, bool stat, bool* des)&#123; for(int i = 1; i &lt;= n; i++) des[i] = stat;&#125;inline bool isMinDic(int n, int* dicOri, int* dicCmp)&#123; for(int i = 1; i &lt;= n; i++) &#123; if(dicCmp[i] != dicOri[i]) &#123; if(dicCmp[i] &gt; dicOri[i]) return false; if(dicCmp[i] &lt; dicOri[i]) return true; &#125; &#125; return false;&#125; inline void setEdge(int u, int v, bool w, std::vector&lt;Edge&gt;* graph)&#123; for(std::vector&lt;Edge&gt;::iterator it = graph[u].begin(); it != graph[u].end(); it++) &#123; if((*it).v == v) &#123; (*it).w = w; return; &#125; &#125;&#125;void DFS(int now, int&amp; depth, bool* isVisited, std::vector&lt;Edge&gt;* graph, int* dic)&#123; isVisited[now] = true; dic[depth++] = now; for(std::vector&lt;Edge&gt;::iterator it = graph[now].begin(); it != graph[now].end(); it++) &#123; if(!isVisited[(*it).v] &amp;&amp; (*it).w) DFS((*it).v, depth, isVisited, graph, dic); &#125;&#125;inline void subtask(int n, std::vector&lt;Edge&gt;* graph, bool* isVisited, int* dic)&#123; for(int k = 1;k &lt;= n;k++) &#123; for(std::vector&lt;Edge&gt;::iterator it = graph[k].begin(); it != graph[k].end(); it++) &#123; (*it).w = false/*, setEdge((*it).v, (*it).u, false, graph)*/; int tDic[1 + n]; tDic[0] = 0; int depth = 1; for(int i = 1; i &lt;= n; i++)&#123;tDic[i] = 5000 + 1; isVisited[i] = false;&#125; DFS(1, depth, isVisited, graph, tDic); if(isMinDic(n, dic, tDic)) copy(n, tDic, dic); (*it).w = true/*, setEdge((*it).v, (*it).u, true, graph)*/; &#125; &#125;&#125;int main()&#123; int n, m; std::cin &gt;&gt; n &gt;&gt; m; std::vector&lt;Edge&gt; graph[1 + n]; for(int i = 1; i &lt;= m; i++) &#123; int u, v; scanf(&quot;%i %i&quot;, &amp;u, &amp;v); graph[u].push_back(Edge(u, v)); graph[v].push_back(Edge(v, u)); &#125; for(int i = 1; i &lt;= n; i++) &#123; std::sort(graph[i].begin(), graph[i].end(), cmp); &#125; int dic[1 + n]; for(int i = 1;i &lt;= n;i++)&#123;dic[i] = 5000 + 1;&#125; dic[0] = 0; bool isVisited[1 + n]; memset(isVisited, false, sizeof(isVisited)); int depth = 1; n != m ? DFS(1, depth, isVisited, graph, dic) : subtask(n, graph, isVisited, dic); for(int i = 1; i &lt;= n; i++) &#123; printf(&quot;%i &quot;, dic[i]); &#125; return 0;&#125; &emsp;&emsp;我交了, 吸氧了, 多50ms T了, 那咋办嘛 QAQ &emsp;&emsp;很明显, 这个简单暴力方法的复杂度为$\\Theta\\left(N^{2}\\right)$, 所以T了也不奇怪. 剪枝&emsp;&emsp;相应地, 这时就需要剪枝了. &emsp;&emsp;这里只讲最优化剪枝. 当当前搜索所得序列劣于已得最佳序列时就可选择剪枝. 修改上述程序, 最终得到以下代码, 复杂度$\\Omega\\left(n\\right)$, $O\\left(N^{2}\\right)$. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#include &lt;cstdlib&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;cstdio&gt;#include &lt;iostream&gt;struct Edge&#123; int u, v; bool w; Edge(int U = 0, int V = 0, bool W = true) &#123; (*this).u = U, (*this).v = V, (*this).w = W; &#125; void reverse() &#123; std::swap((*this).u, (*this).v); return; &#125; Edge getReversed() &#123; return Edge((*this).v, (*this).u, (*this).w); &#125; Edge operator = (const Edge&amp; inEdge) &#123; (*this).u = inEdge.u, (*this).v = inEdge.v, (*this).w = inEdge.w; return *this; &#125; &#125;emptyEdge;inline bool cmp(Edge E, Edge e)&#123; return E.v &lt; e.v;&#125;inline void copy(int n, int* ori, int* des)&#123; for(int i = 1; i &lt;= n; i++) des[i] = ori[i];&#125;inline void set(int n, bool stat, bool* des)&#123; for(int i = 1; i &lt;= n; i++) des[i] = stat;&#125;inline bool isMinDic(int n, int* dicOri, int* dicCmp)&#123; for(int i = 1; i &lt;= n; i++) &#123; if(dicCmp[i] != dicOri[i]) &#123; if(dicCmp[i] &gt; dicOri[i]) return false; if(dicCmp[i] &lt; dicOri[i]) return true; &#125; &#125; return false;&#125; inline void setEdge(int u, int v, bool w, std::vector&lt;Edge&gt;* graph)&#123; for(std::vector&lt;Edge&gt;::iterator it = graph[u].begin(); it != graph[u].end(); it++) &#123; if((*it).v == v) &#123; (*it).w = w; return; &#125; &#125;&#125;void DFS(int now, int&amp; depth, bool* isVisited, std::vector&lt;Edge&gt;* graph, int* dic, int* cmpDic, bool&amp; wasEqual, bool&amp; isBestSolution, bool&amp; notBestSolution)&#123; if(notBestSolution) return; isVisited[now] = true; dic[depth] = now; if(wasEqual &amp;&amp; !isBestSolution) &#123; dic[depth] != cmpDic[depth] ? (dic[depth] &lt; cmpDic[depth] ? isBestSolution = true : false), (dic[depth] &gt; cmpDic[depth] ? notBestSolution = true : false), wasEqual = false : wasEqual = true; &#125; depth++; for(std::vector&lt;Edge&gt;::iterator it = graph[now].begin(); it != graph[now].end(); it++) &#123; if(!isVisited[(*it).v] &amp;&amp; (*it).w) DFS((*it).v, depth, isVisited, graph, dic, cmpDic, wasEqual, isBestSolution, notBestSolution); &#125;&#125;inline void subtask(int n, int&amp; depth, bool* isVisited, std::vector&lt;Edge&gt;* graph, int* dic, int* resultDic, bool&amp; wasEqual, bool&amp; isBestSolution, bool&amp; notBestSolution)&#123; for(int k = 1;k &lt;= n;k++) &#123; for(std::vector&lt;Edge&gt;::iterator it = graph[k].begin(); it != graph[k].end(); it++) &#123; (*it).w = false/*, setEdge((*it).v, (*it).u, false, graph)*/; int tDic[1 + n]; tDic[0] = 0, depth = 1, wasEqual = true, isBestSolution = false, notBestSolution = false; for(int i = 1; i &lt;= n; i++) &#123;tDic[i] = 5000 + 1; isVisited[i] = false;&#125; DFS(1, depth, isVisited, graph, tDic, resultDic, wasEqual, isBestSolution, notBestSolution); if(isBestSolution) copy(n, tDic, resultDic); (*it).w = true/*, setEdge((*it).v, (*it).u, true, graph)*/; &#125; &#125;&#125;int main()&#123; //freopen(&quot;in&quot;,&quot;r&quot;,stdin); int n, m; std::cin &gt;&gt; n &gt;&gt; m; std::vector&lt;Edge&gt; graph[1 + n]; for(int i = 1; i &lt;= m; i++) &#123; int u, v; scanf(&quot;%i %i&quot;, &amp;u, &amp;v); graph[u].push_back(Edge(u, v)); graph[v].push_back(Edge(v, u)); &#125; for(int i = 1; i &lt;= n; i++) &#123; std::sort(graph[i].begin(), graph[i].end(), cmp); &#125; int dic[1 + n]; for(int i = 1;i &lt;= n;i++)&#123;dic[i] = 5000 + 1;&#125; dic[0] = 0; bool isVisited[1 + n]; memset(isVisited, false, sizeof(isVisited)); int depth = 1; bool wasEqual = true, isBestSolution = false, notBestSolution = false; n != m ? DFS(1, depth, isVisited, graph, dic, dic, wasEqual, isBestSolution, notBestSolution) : subtask(n, depth, isVisited, graph, dic, dic, wasEqual, isBestSolution, notBestSolution); for(int i = 1; i &lt;= n; i++) &#123; printf(&quot;%i &quot;, dic[i]); &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/categories/OI/"},{"name":"算法","slug":"算法","permalink":"http://blog.infi.wang/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/tags/OI/"},{"name":"算法","slug":"算法","permalink":"http://blog.infi.wang/tags/%E7%AE%97%E6%B3%95/"},{"name":"NOIP","slug":"NOIP","permalink":"http://blog.infi.wang/tags/NOIP/"},{"name":"搜索","slug":"搜索","permalink":"http://blog.infi.wang/tags/%E6%90%9C%E7%B4%A2/"},{"name":"DFS","slug":"DFS","permalink":"http://blog.infi.wang/tags/DFS/"},{"name":"剪枝","slug":"剪枝","permalink":"http://blog.infi.wang/tags/%E5%89%AA%E6%9E%9D/"},{"name":"生成树","slug":"生成树","permalink":"http://blog.infi.wang/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"图论","slug":"图论","permalink":"http://blog.infi.wang/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"树论","slug":"树论","permalink":"http://blog.infi.wang/tags/%E6%A0%91%E8%AE%BA/"}]}],"categories":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/categories/infi/"},{"name":"中文","slug":"中文","permalink":"http://blog.infi.wang/categories/%E4%B8%AD%E6%96%87/"},{"name":"教程","slug":"教程","permalink":"http://blog.infi.wang/categories/%E6%95%99%E7%A8%8B/"},{"name":"游戏","slug":"游戏","permalink":"http://blog.infi.wang/categories/%E6%B8%B8%E6%88%8F/"},{"name":"彩虹六号","slug":"彩虹六号","permalink":"http://blog.infi.wang/categories/%E5%BD%A9%E8%99%B9%E5%85%AD%E5%8F%B7/"},{"name":"逆向","slug":"逆向","permalink":"http://blog.infi.wang/categories/%E9%80%86%E5%90%91/"},{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/categories/OI/"},{"name":"算法","slug":"算法","permalink":"http://blog.infi.wang/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"infi","slug":"infi","permalink":"http://blog.infi.wang/tags/infi/"},{"name":"随笔","slug":"随笔","permalink":"http://blog.infi.wang/tags/%E9%9A%8F%E7%AC%94/"},{"name":"游戏","slug":"游戏","permalink":"http://blog.infi.wang/tags/%E6%B8%B8%E6%88%8F/"},{"name":"彩虹六号","slug":"彩虹六号","permalink":"http://blog.infi.wang/tags/%E5%BD%A9%E8%99%B9%E5%85%AD%E5%8F%B7/"},{"name":"逆向","slug":"逆向","permalink":"http://blog.infi.wang/tags/%E9%80%86%E5%90%91/"},{"name":"教程","slug":"教程","permalink":"http://blog.infi.wang/tags/%E6%95%99%E7%A8%8B/"},{"name":"RAD Video Tools","slug":"RAD-Video-Tools","permalink":"http://blog.infi.wang/tags/RAD-Video-Tools/"},{"name":"QuickBMS","slug":"QuickBMS","permalink":"http://blog.infi.wang/tags/QuickBMS/"},{"name":"OI","slug":"OI","permalink":"http://blog.infi.wang/tags/OI/"},{"name":"算法","slug":"算法","permalink":"http://blog.infi.wang/tags/%E7%AE%97%E6%B3%95/"},{"name":"NOIP","slug":"NOIP","permalink":"http://blog.infi.wang/tags/NOIP/"},{"name":"搜索","slug":"搜索","permalink":"http://blog.infi.wang/tags/%E6%90%9C%E7%B4%A2/"},{"name":"DFS","slug":"DFS","permalink":"http://blog.infi.wang/tags/DFS/"},{"name":"剪枝","slug":"剪枝","permalink":"http://blog.infi.wang/tags/%E5%89%AA%E6%9E%9D/"},{"name":"生成树","slug":"生成树","permalink":"http://blog.infi.wang/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"图论","slug":"图论","permalink":"http://blog.infi.wang/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"树论","slug":"树论","permalink":"http://blog.infi.wang/tags/%E6%A0%91%E8%AE%BA/"}]}